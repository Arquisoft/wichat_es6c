openapi: 3.1.0
info:
  title: API de Historial de Usuarios
  description: API para gestionar el historial de juegos de los usuarios.
  version: 2.0.0
servers:
   - url: http://localhost:8000
     description: Development server
   - url: http://20.0.80.6:8000
     description: Production server

paths:
  /createUserHistory:
    post:
      summary: Crear un historial de usuario
      description: Registra una nueva entrada en el historial de juegos de un usuario.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                  example: "juanperez"
                correctAnswers:
                  type: integer
                  example: 5
                wrongAnswers:
                  type: integer
                  example: 2
                time:
                  type: integer
                  example: 120
                score:
                  type: integer
                  example: 500
                gameMode:
                  type: string
                  example: "Geography"
      responses:
        200:
          description: Historial creado correctamente
          content:
            application/json:
              schema:
                type: object
                properties:
                  username:
                    type: string
                    example: "juanperez"
                  correctAnswers:
                    type: integer
                    example: 5
                  wrongAnswers:
                    type: integer
                    example: 2
                  time:
                    type: integer
                    example: 120
                  score:
                    type: integer
                    example: 500
                  gameMode:
                    type: string
                    example: "Geography"
        400:
          description: Error en los datos enviados
        500:
          description: Error en el servidor

  /getUserHistory:
    get:
      summary: Obtener historial de un usuario
      description: Retorna el historial de juegos de un usuario específico.
      parameters:
        - name: username
          in: query
          required: true
          description: Nombre de usuario del cual se quiere obtener el historial.
          schema:
            type: string
            example: "juanperez"
      responses:
        200:
          description: Historial obtenido correctamente
          content:
            application/json:
              schema:
                type: object
                properties:
                  history:
                    type: array
                    items:
                      type: object
                      properties:
                        username:
                          type: string
                          example: "juanperez"
                        correctAnswers:
                          type: integer
                          example: 5
                        wrongAnswers:
                          type: integer
                          example: 2
                        time:
                          type: integer
                          example: 120
                        score:
                          type: integer
                          example: 500
                        gameMode:
                          type: string
                          example: "Geography"
        400:
          description: Se requiere un username
        500:
          description: Error en el servidor
  /getUserStats:
    get:
      summary: Obtener estadísticas de usuario
      description: Obtiene las estadísticas del usuario, como el número de juegos jugados, respuestas correctas, respuestas incorrectas, entre otras.
      parameters:
        - name: username
          in: query
          required: true
          description: Nombre de usuario para obtener las estadísticas.
          schema:
            type: string
            example: "juanperez"
      responses:
        200:
          description: Estadísticas del usuario obtenidas correctamente
          content:
            application/json:
              schema:
                type: object
                properties:
                  username:
                    type: string
                    example: "juanperez"
                  totalGames:
                    type: integer
                    example: 10
                  correctAnswers:
                    type: integer
                    example: 50
                  wrongAnswers:
                    type: integer
                    example: 20
                  averageScore:
                    type: number
                    format: float
                    example: 450.5
        400:
          description: Se requiere un username
        500:
          description: Error al obtener estadísticas

  /getLeaderboard:
    get:
      summary: Obtener ranking global
      description: Obtiene el ranking global de los usuarios basado en sus puntajes.
      responses:
        200:
          description: Ranking global obtenido correctamente
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    username:
                      type: string
                      example: "juanperez"
                    score:
                      type: integer
                      example: 1200
                    rank:
                      type: integer
                      example: 1
        500:
          description: Error al obtener el ranking
  /health:
    get:
      summary: Verificar estado del servicio
      description: Endpoint de comprobación de salud del sistema
      responses:
        200:
          description: Servicio operativo
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: "OK"

  /questions/{lang}/{category}:
    get:
      summary: Obtener preguntas por categoría
      description: Devuelve preguntas de una categoría específica desde Wikidata
      parameters:
        - name: lang
          in: path
          required: true
          schema:
            type: string
            example: "es"
        - name: category
          in: path
          required: true
          schema:
            type: string
            example: "country"
      responses:
        200:
          description: Lista de preguntas
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    question:
                      type: string
                      example: "¿Cuál es la capital de Francia?"
                    correctAnswer:
                      type: string
                      example: "Paris"
                    options:
                      type: array
                      items:
                        type: string
                      example: ["Londres", "Berlin", "Paris"]
        404:
          description: Categoría no encontrada
        500:
          description: Error del servidor

  /login:
    post:
      summary: Autenticación de usuario
      description: Inicio de sesión para usuarios registrados
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                  example: "juanperez"
                password:
                  type: string
                  example: "Pass1234"
      responses:
        200:
          description: Autenticación exitosa
          content:
            application/json:
              schema:
                type: object
                properties:
                  token:
                    type: string
                    example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
                  user:
                    type: object
                    properties:
                      username:
                        type: string
                        example: "juanperez"
        401:
          description: Credenciales inválidas
        500:
          description: Error de autenticación

  /user:
    post:
      summary: Registrar nuevo usuario
      description: Creación de una nueva cuenta de usuario
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - username
                - password
                - name
                - surname
              properties:
                username:
                  type: string
                  example: "juanperez"
                password:
                  type: string
                  example: "Pass1234"
                name:
                  type: string
                  example: "juan"
                surname:
                  type: string
                  example: "perez"
      responses:
        201:
          description: Usuario creado exitosamente
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: string
                    example: "5f8d04b3ab35b2d3c4d8f9a2"
                  username:
                    type: string
                    example: "juanperez"
        400:
          description: Datos de usuario inválidos
        500:
          description: Error en el servidor

  /askllm:
    post:
      summary: Consultar al modelo de lenguaje
      description: |
        Obtener respuesta generada por el modelo de lenguaje (LLM).
        Actualmente soporta el modelo Mistral-7B a través de la API de EmpathyAI.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - question
                - model
                - apiKey
              properties:
                question:
                  type: string
                  description: Pregunta o prompt para el modelo
                  example: "Explica la teoría de la relatividad en términos simples"
                model:
                  type: string
                  description: Modelo LLM a utilizar (actualmente solo 'empathy' soportado)
                  enum: ["empathy"]
                  default: "empathy"
                  example: "empathy"
                apiKey:
                  type: string
                  description: API Key para autenticación con el servicio LLM
                  example: "sk-123456789abcdef"
                context:
                  type: string
                  description: Contexto adicional para la pregunta (opcional)
                  example: "Para un estudiante de secundaria"
      responses:
        200:
          description: Respuesta generada por el LLM
          content:
            application/json:
              schema:
                type: object
                properties:
                  answer:
                    type: string
                    description: Respuesta generada por el modelo
                    example: "La teoría de la relatividad de Einstein establece que..."
        400:
          description: Error en la solicitud
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    description: Mensaje de error detallado
                    example: "Missing required field: apiKey"
        500:
          description: Error en el servidor o en la conexión con el servicio LLM      
